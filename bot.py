import logging
from aiogram import Bot, Dispatcher, executor, types

import reply as nav
import inline as inl

API_TOKEN = '5214367976:AAE70RfU32o_UjpOgDegVxUAVsxNFepywkQ'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def bot_message(message: types.Message):
    await bot.send_photo(chat_id=message.chat.id, photo=open('mainphoto.jfif', 'rb'))
    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ethanol Delivery! ü•Ç\n\n--- –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1200—Ç–≥ ---\n'
                                                 '--- —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ - 100—Ç–≥ ---\n\n '
                                                 '--- ‚ùóÔ∏è–ø—Ä–æ—Å–∏–º —Å–æ–±–ª—é–¥–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚ùóÔ∏è ---\n\n –ì–∞–π–¥:\n '
                                                 '1) –°–º–æ—Ç—Ä–∏—Ç–µ –º–µ–Ω—é, –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä\n\n'
                                                 '2) –ü–∏—à–µ—Ç–µ –≤ –ª–∏—á–∫—É(telegram) –Ω–∞ –Ω–æ–º–µ—Ä: +7 778 189 5555 –ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ:\n'
                                                 '–ò–º—è, –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞/–∫–æ–º–Ω–∞—Ç–∞, –ø—Ä–æ–¥—É–∫—Ç - –∫–æ–ª.–≤–æ, –ø—Ä–æ–¥—É–∫—Ç - –∫–æ–ª.–≤–æ ....\n\n'
                                                 '–ø—Ä–∏–º–µ—Ä:\n'
                                                 '"–•—É–ª–∏–æ, 55/555, –ñ–∞—Ç–µ—Ü–∫–∏ - 2, –°–æ–º–µ—Ä—Å –ú–∞–Ω–≥–æ - 3, Lays/Paprika - 1 ..."\n\n'
                                                 '3) –ü–æ–ª—É—á–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚úÖ‚úÖ‚úÖ\n\n\n'
                                                 '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:\n\n'
                                                 '8Ô∏è‚É£  7Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£  1Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£  5Ô∏è‚É£5Ô∏è‚É£5Ô∏è‚É£5Ô∏è‚É£\n\n'
                                                 '@ethanol_delivery',
                           reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–ú–µ–Ω—é':
        await message.reply("–ù–∞—à–µ –º–µ–Ω—é:", reply_markup=inl.main_inl)



# Inline buttons ------------
#Vodka
@dp.callback_query_handler(text=["vodka_price"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "vodka_price":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∫—É', reply_markup=inl.vodka_inl)
    await call.answer()

@dp.callback_query_handler(text=["sg5"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "sg5":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=inl.sg5_inl)
    await call.answer()

@dp.callback_query_handler(text=["back"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "back":
        await call.message.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥', reply_markup=inl.main_inl)
    await call.answer()

@dp.callback_query_handler(text=["mainmenu"])
async def main_menu_btn(call: types.CallbackQuery):
    if call.data == "mainmenu":
        await call.message.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=inl.main_inl)
    await call.answer()

@dp.callback_query_handler(text=["basket"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "basket":
        await call.message.reply('–°–∏–Ω—è—è –≥–æ—Ä–∞(1) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=inl.vodka_inl)
    await call.answer()

@dp.callback_query_handler(text=["buy_now"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "buy_now":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫', reply_markup=inl.block_inl)
    await call.answer()

# ----- –ë–ª–æ–∫–∏(–ù–£) ------

@dp.callback_query_handler(text=["22"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "22":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()

@dp.callback_query_handler(text=["23"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "23":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()

@dp.callback_query_handler(text=["24"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "24":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()

@dp.callback_query_handler(text=["25"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "25":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()

@dp.callback_query_handler(text=["26"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "26":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()

@dp.callback_query_handler(text=["27"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "27":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:', reply_markup=inl.stage_inl)
    await call.answer()
# ---- end -------

# ---- —ç—Ç–∞–∂ ------
@dp.callback_query_handler(text=["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"])
async def vodka_menu(call: types.CallbackQuery):
    if call.data == "2" or "4" or "5" or "6" or "7" or "8" or "9" or "10" or "11" or "12":
        await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:', reply_markup=inl.room_inl)
    await call.answer()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates= True)

